curve(dt(x), from =-3, to =3, df =10, add = T )
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)")
curve(dt(x,df =10), from =-3, to =3, add = T )
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)")
curve(dt(x,df =10), from =-3, to =3, add = T, col = "blue")
par(mfrow = c(1, 1))
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
library(plotly)
fig <- plot_ly(x = ~rnorm(50), type = "histogram")
fig
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
?plot_ly
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
sims <- 1000
set.seed(62)
get_z <- function(estimate=TRUE){
x    <- rexp(input$n, rate = 1)
sigma <- sqrt(1/(input$n))
if(estimate == TRUE){
sigma <- sqrt(var(x)/(input$n-1))
}
z <- (mean(x)- 1)/sigma
return(z)
}
sim_means_Est <- replicate(sims, get_z(TRUE))
sim_means <-  replicate(sims, get_z(FALSE))
input <- list(n = 30)
sims <- 1000
set.seed(62)
get_z <- function(estimate=TRUE){
x    <- rexp(input$n, rate = 1)
sigma <- sqrt(1/(input$n))
if(estimate == TRUE){
sigma <- sqrt(var(x)/(input$n-1))
}
z <- (mean(x)- 1)/sigma
return(z)
}
sim_means_Est <- replicate(sims, get_z(TRUE))
sim_means <-  replicate(sims, get_z(FALSE))
the_values = seq(-3, 3, length.out = sims)
trace_z <- dnorm(the_values)
trace_t <- dt(the_values, df=(input$n-1))
the_data <- data.frame(the_values, trace_z, trace_t)
fig <- plot_ly(x = ~sim_means,
type = "histogram",
xlab = "x", ylab = "p(x)",
histnorm = "probability",
alpha = 0.6)
fig <-  add_histogram(x = ~sim_means_Est,
name = "Estimated Sigma")
fig <- fig %>% layout(barmode = "overlay")
runApp('ShinyApps/t_z_distribution')
fig <- plot_ly(x = ~sim_means,
type = "histogram",
xlab = "x", ylab = "p(x)",
histnorm = "probability",
alpha = 0.6)
fig <-  add_histogram(x = ~sim_means_Est)
fig <- fig %>% layout(barmode = "overlay")
fig <- plot_ly(x = ~sim_means,
type = "histogram",
xlab = "x", ylab = "p(x)",
histnorm = "probability",
alpha = 0.6)
fig <-  add_histogram(x = ~sim_means_Est)
fig <- fig %>% layout(barmode = "overlay")
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
fig <- plot_ly(
alpha = 0.6)
fig <- add_histogram(x = ~sim_means,histnorm = "probability")
fig <-  add_histogram(x = ~sim_means_Est,histnorm = "probability")
fig <- fig %>% layout(barmode = "overlay")
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
runApp('ShinyApps/t_z_distribution')
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)")
curve(dt(x, df =10), from =-3, to =3, add = T, col = "blue")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)", lwd = 2)
curve(dt(x, df =10), from =-3, to =3, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "n", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2)
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)", lwd = 2)
curve(dt(x, df =10), from =-3, to =3, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2)
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-3, to =3, ylab = "p(x)", lwd = 2)
curve(dt(x, df =10), from =-3, to =3, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
hist(rnorm(100), main = "", xlab = "x", prob = T)
curve(dnorm(x), from =-3, to =3, ylab = "p(x)")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-4, to =4, ylab = "p(x)", lwd = 2)
curve(dt(x, df =5), from =-4, to =4, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-4, to =4, ylab = "p(x)", lwd = 2)
curve(dt(x, df =5), from =-4, to =4, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-4, to =4, ylab = "p(x)", lwd = 2,  axes=FALSE)
curve(dt(x, df =5), from =-4, to =4, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-4, to =4, ylab = "", lwd = 2,  axes=FALSE, xlab = "")
curve(dt(x, df =5), from =-4, to =4, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
curve(dnorm(x), from =-4, to =4, ylab = "", lwd = 2,  axes=FALSE, xlab = "")
curve(dt(x, df =3), from =-4, to =4, add = T, col = "blue", lwd = 2, lty =2)
legend("topright", border = "white", legend = c("Z-distr", "t-distr"),
lty = c(1, 2), col = c("black", "blue"), lwd = 2, bty = "n")
par(mfrow = c(1, 1))
runApp('ShinyApps/Small_b_CV_distr')
runApp('ShinyApps/Small_b_CV_distr')
ls()
list.files()
?srt_detect
??srt_detect
??str_detect
input <- list()
input$b = 0.2
setwd("~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr")
str_detect(input$b, list.files())
library(stringr)
str_detect(input$b, list.files())
input$b
as.character(input$b)
str_detect(as.character(input$b), list.files())
list.files()
as.character(input$b)
?str_detect
paste("distr_est_b", input$b, ".csv", sep = "")
file_name <- paste("distr_est_b", input$b, ".csv", sep = "")
distr <- read.csv(file_name)
distr
colnames(dist_keep)
dist_keep <- read.csv(file_name)
colnames(dist_keep)
runApp()
Bartlett_01 <- read.csv("~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr/Bartlett_CV/Bartlett_01.csv")
View(Bartlett_01)
cv_table<- Bartlett_01
cv_table$m1
fitted_model <- function(cv_matrix, alpha_levels=0.95, m=1){
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T))
return(fit)
}
fit <- fitted_model(cv_table, alpha_levels = 1-input$alpha)
fitted_model <- function(cv_matrix, alpha_levels=0.95, m=1){
chisq_cv <- qchisq(alpha_levels, df = m)/m
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T))
return(fit)
}
fit <- fitted_model(cv_table, alpha_levels = 1-input$alpha)
cv_matrix <- cv_table
cv_matrix[,1]
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
try_b
m= 1
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
chisq_cv <- qchisq(0.95), df = m)/m
chisq_cv <- qchisq(0.95, df = m)/m
specific_cvs = cv_matrix[,m+1] - chisq_cv
specific_cvs
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T)
)
fitted_model <- function(cv_matrix, alpha_levels=0.95, m=1){
chisq_cv <- qchisq(alpha_levels, df = m)/m
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T))
return(fit)
}
fitted_model(cv_table, alpha_levels = 1-input$alpha)
fitted_model <- function(cv_matrix, alpha_levels=0.95, m=1){
browser()
chisq_cv <- qchisq(alpha_levels, df = m)/m
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T))
return(fit)
}
file_name <- paste("Bartlett_", input$b, ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_levels = 1-input$alpha)
input$alpha = 0.05
file_name <- paste("Bartlett_", input$b, ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_levels = 1-input$alpha)
fit$fitted.values
try_b
fitted_value <- function(fit, b){
fit_b <- predict(fit, newdata =poly(b, 3, raw = T))
return(fit_b)
}
fitted_value(0.2)
poly(b, 3, raw = T)
poly(0.2, 3, raw = T)
predict(fit, 0.2)
predict(fit, newdata = 0.2)
predict(fit, newdata = data.frame(poly(b, 3, raw = T)))
fit$coefficients%*%poly(b, 3, raw = T))
fit$coefficients%*%poly(b, 3, raw = T)
fit$coefficients%*%poly(0.2, 3, raw = T)
fit$coefficients
poly(0.2, 3, raw = T)
fit$coefficients*poly(0.2, 3, raw = T)
52.8*.2
-20*0.04
sum(fit$coefficients*poly(0.2, 3, raw = T))
input$alpha = 05
as.numeric(paste(".", input$alpha, sep = "")))
as.numeric(paste(".", input$alpha, sep = ""))
paste(".", input$alpha, sep = "")
input$alpha = "05"
paste(".", input$alpha, sep = "")
as.numeric(paste(".", input$alpha, sep = ""))
runApp()
?cd
??cd
?wd
setwd("~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr")
runApp()
dir <- getwd()
dir
setwd("Bartlett_CV")
getwd()
file_name <- paste("Bartlett_", input$b, ".csv", sep = "")
cv_table <- read.csv(file_name)
input$b
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
file_name <- paste("Bartlett_", input$alpha, ".csv", sep = "")
file_name
input
file_name <- paste("distr_est_b", input$b, ".csv", sep = "")
alpha <- as.numeric(paste(".", input$alpha, sep = ""))
dist_keep <- read.csv(file_name)
bartlett_density <- density(dist_keep$Bartlett)
bartlett_lug_density <- density(dist_keep$Bartlett_lug)
getwd()
setwd("~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr")
file_name <- paste("distr_est_b", input$b, ".csv", sep = "")
alpha <- as.numeric(paste(".", input$alpha, sep = ""))
dist_keep <- read.csv(file_name)
bartlett_density <- density(dist_keep$Bartlett)
bartlett_lug_density <- density(dist_keep$Bartlett_lug)
reso <- 175
length <- 4*reso/72
#png("distribution_density.png",units="in",res=reso,height=length,width=length)
#par(mar=c(5,5,2,2),xaxs = "i",yaxs = "i", cex=2)
plot(bartlett_density, col = "red", xlim = c(0, 10),
main = "", xlab = "X", lwd = 4, ylim = c(0, 1))
curve(dchisq(x, 1), add = T, lwd = 4, lty = 2)
lines(bartlett_lug_density, col = "blue", lwd = 4)
cv <- qchisq(1-alpha, 1)
lines(c(cv, cv), c(0, .20), col = "black", lty = 3, lwd = 4)
text(cv , .22, round(cv, 2))
# Bartlett
#cv <- quantile(dist_keep$Bartlett, .95)
#cv <- 4.687047
dir <- getwd()
setwd("Bartlett_CV")  # Move Directory Temporarily
file_name <- paste("Bartlett_", input$alpha, ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_levels = 1-alpha)
cv <- fitted_value(fit, input$b, alpha)
lines(c(cv, cv), c(0, .24), col = "red", lty = 3, lwd = 4)
text(cv , .26, round(cv, 2), col = "red")
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
input
input$alpha
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
fitted_model <- function(cv_matrix, alpha_level=0.05, m=1){
chisq_cv <- qchisq(1-alpha_level, df = m)/m
try_b <- cv_matrix[,1]
try_b <- as.numeric(gsub("b=", "", try_b))
specific_cvs = cv_matrix[,m+1] - chisq_cv
fit = lm(specific_cvs ~ 0+  poly(try_b, 3, raw = T))
return(fit)
}
# Get specific fitted/predicted value
fitted_value <- function(fit, b, alpha = 0.05){
chisq_cv <- qchisq(1-alpha, df = m)/m
fit_b <- sum(fit$coefficients*poly(b, 3, raw = T))
fit_b <- chisq_cv + fit_b
return(fit_b)
}
input$alpha = "01"
input$b=0.2
file_name <- paste("distr_est_b", input$b, ".csv", sep = "")
alpha <- as.numeric(paste(".", input$alpha, sep = ""))
dist_keep <- read.csv(file_name)
bartlett_density <- density(dist_keep$Bartlett)
bartlett_lug_density <- density(dist_keep$Bartlett_lug)
getwd()
setwd("~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr")
file_name <- paste("distr_est_b", input$b, ".csv", sep = "")
alpha <- as.numeric(paste(".", input$alpha, sep = ""))
dist_keep <- read.csv(file_name)
bartlett_density <- density(dist_keep$Bartlett)
bartlett_lug_density <- density(dist_keep$Bartlett_lug)
# Plot density curves
plot(bartlett_density, col = "red", xlim = c(0, 10),
main = "", xlab = "X", lwd = 4, ylim = c(0, 1))
curve(dchisq(x, 1), add = T, lwd = 4, lty = 2)
lines(bartlett_lug_density, col = "blue", lwd = 4)
# Standard criticval value
cv <- qchisq(1-alpha, 1)
lines(c(cv, cv), c(0, .20), col = "black", lty = 3, lwd = 4)
text(cv , .22, round(cv, 2))
dir <- getwd()
setwd("Bartlett_CV")  # Move Directory Temporarily
file_name <- paste("Bartlett_", "01", ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_level = 1-alpha)
cv <- fitted_value(fit, input$b, alpha)
lines(c(cv, cv), c(0, .24), col = "red", lty = 3, lwd = 4)
text(cv , .26, round(cv, 2), col = "red")
cv
input$alpha
input$b
alpha
file_name <- paste("Bartlett_Lugsail", input$b, ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_level = 1-alpha)
cv <- fitted_value(fit, input$b, alpha)
lines(c(cv, cv), c(0, .20), col = "blue", lty = 3, lwd = 4)
text(cv , .22, round(cv, 2), col = "blue")
file_name <- paste("Bartlett_Lugsail_", input$alpha, ".csv", sep = "")
cv_table <- read.csv(file_name)
fit <- fitted_model(cv_table, alpha_level = 1-alpha)
cv <- fitted_value(fit, input$b, alpha)
lines(c(cv, cv), c(0, .20), col = "blue", lty = 3, lwd = 4)
text(cv , .22, round(cv, 2), col = "blue")
legend("topright",
legend = c("Small-b",
"Fixed-b: Bartlett",
"Fixed-b: Lugsail"),
lty = c(2, 1, 1),
col = c("black", "red", "blue"),
lwd = 4)
#dev.off()
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
chisq_cv <- qchisq(1-alpha, df = m)/m
poly(b, 3, raw = T)
poly(0.2, 3, raw = T)
sum(fit$coefficients*poly(b, 3, raw = T))
sum(fit$coefficients*poly(0.2, 3, raw = T))
chisq_cv + fit_b
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
?mtext
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
?text
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
View(fitted_model)
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
?density
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
View(fitted_value)
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/Small_b_CV_distr')
knitr::opts_chunk$set(echo = TRUE)
LH <- c(LakeHuron)
arithmetic_mean = sum(LH)/(length(LH))
mean_deviate = (sum(abs(LH - arithmetic_mean))/(length(LH)))
var1 = (sum((LH - arithmetic_mean)^2))/(length(LH)-1)
leng_min = length(LH)-1
leng = length(LH)
var2 = ((sum(LH^2)-(sum(LH)^2)/leng)/(leng_min))
var1 = (sum((LH - arithmetic_mean)^2))/(length(LH)-1)
coef_var = (sqrt(var1))/(arithmetic_mean)
LH_dispersion = c(mean_deviate , var1 , coef_var)
LH_dispersion
knitr::opts_chunk$set(echo = TRUE)
mean_dev <- sum(abs(LH - am))/length(LH)
LH <- c(LakeHuron)
am <- sum(LH)/length(LH)
am
mean_dev <- sum(abs(LH - am))/length(LH)
mean_dev
var1 <- sum((LH - am)^2)/(length(LH)-1)
var1
var2 <-  (sum(LH^2)-sum(LH)^2/length(LH))/(length(LH)-1)
var2
CoefVar <- sqrt(var1)/am
CoefVar
LH_dispersion2 <- c(mean_dev, var1, CoefVar)
LH_dispersion
LH_dispersion2
View(Bartlett_01)
View(cv_matrix)
View(cv_table)
View(dist_keep)
runApp('~/Documents/GitHub/JobTalk/ShinyApps/t_z_distribution')
runApp('~/Documents/GitHub/JobTalk/ShinyApps/SimulateCIs')
