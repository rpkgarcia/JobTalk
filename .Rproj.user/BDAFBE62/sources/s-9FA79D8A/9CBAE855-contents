---
title: "Homework 3"
author: "Your Name Here"
output:
  html_document: default
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Instructions
- If you wish to use any additional packages beyond "Base R" (the default) then email Rebecca (`rkurt001@ucr.edu`) for permission. 
- Use R to answer the questions below. 
- Check Piazza regularly for clarification on questions, there may be important posts that will not be announced through *Elearn*.  


# Outliers 

An **outlier** is an extreme or unusual observation in a data set.  Throughout the history of statistics outliers have been a topic of interest.  Scientists have debated on how to treat outliers, and how to rigorously define exactly when a point should be classified as an outlier.

Outliers can be due to many different causes.  Some outliers are due to measurement error, or human error. For example, recording the growth rate of a plant and accidentally adding a few zeros to a recorded observation. 

In addition, we could have an error due to poor sampling methods, resulting in some of our data points not belonging to the population of interest. For example, sampling the heights of basketball players, but accidentally also recording the height of one of the gymnastics team members. 

We could also have a particularly unique observation that was measured correctly and was just unusual. For example, suppose we were interested in recording the average monthly rent of an undergraduate student, but one of the students in the sample was a millionaire and they were renting a mansion. In this case, the millionaire belonged to the group and the recorded measurement was not an error. If the outlier is due to measurement error or a poor sample, it is best to remove it from the data set.  If our outlier is due to particularly unique observation, such as the mansion-renting millionaire undergraduate, we should keep it in the data set.  

Determining what is, or is not, an outlier is a nontrivial task.  Several methods for determining what constitutes an outlier have been proposed. 

1) **Domain Knowledge Method**: The *domain knowledge method* determines what is an unusual observation based on industry information.  This method requires a domain expert and the bounds for what determines an outlier are found independently from the sampled values. For example, a machine expected to produce a part with a weight between 9 lbs and 10 lbs, and the engineer has determined that anything outside that range is particularly unusual.


2) **Interquartile Range (IQR) Method**:  The *IQR method* is a "rule-of-thumb" developed by the statistical community.  We determine if an observation is an outlier depending on if it falls outside a certain range.  Points outside this range are outliers, and the rest are not. To find the range we need the first quartile ($Q_1$), the median ($M$), the third quartile ($Q_3$), and the IQR.  We learned about how to calculate the median in the previous homework. The first quartile is the cutoff point in the data set that separates the smallest 25\% of values in the data set from the largest 75\% of values.  similarly, the third quartile is the cutoff point that separates the smallest 75\% of values in the data set from the largest 25\% of values.  The interquartile range (IQR) is the range of the middle 50\% of values, IQR = $Q_3-Q_1$. Using this method we say a observed value in our data set is an outlier if it is not between $(LB_{IQR} , UB_{IQR})$, defined below. 

$$LB_{IQR}  = Q_1 - 1.5IQR$$
$$UB_{IQR} = Q_3 + 1.5IQR.$$

3) **Z-Score Method**: The *Z-score method* is a third technique for determining outliers and it uses the normal distribution.  This technique assumes that the data comes from an approximately normal distribution. Let $\overline{x}$ be the sample (arithmetic) mean and $s$ be the square root of the variance. Using this method we say a observed value in our data set is an outlier if it is not between ($LB_z, UB_z$), where these bounds are defined below. 


$$LB_z = \overline{x} - 2s$$

$$UB_z = \overline{x} +2s$$


4) **Chebyschev Method**: We also have the *Chebyschev method* which uses Chebyschev's inequality.  This method is similar to the Z-score method, except it does not require the data to be normally distributed.  By relaxing this assumption the bounds which determine what is (or is not) an outlier increase to capture a variety of distributions. Using this result we can create a new cutoff point to find outliers that are comparable to the previous methods listed.  Let $\overline{x}$ be the sample (arithmetic) mean and $s$ be the square root of the variance. We say an observed value in our data set is an outlier if it is not between ($LB_c, UB_c$), where these bounds are defined as the following. 

$$LB_c = \overline{x} - 4.5s$$
$$UB_c = \overline{x} + 4.5s$$

## Outlier Detection Methods Compared 

The first method introduced requires domain knowledge which we might not have access to.  The second method is a quick "rule-of-thumb" which preforms well in practice and has no distributional assumptions.  The last two methods are motivated by statistical theory; however the Z-score method requires the data to come from a population that is approximately normally distributed, which may not be reasonable.  The Chebyschev method has no assumptions which make the bounds very conservative, and much wider than would be expected if we did know the distribution the data came from.  In practice, the IQR and the Z-score method are the most common. 

The IQR, Z-Score, and Chebyschev methods above all have some lower bound ($LB$) and upper bound ($UB$) cutoff points.  Values in the data set that lie beyond these boundaries are considered outliers.  These methods were developed to have an impartial "data driven" method for an arbitrary data set with little to no assumptions. 

All these methods are simply tools to have an impartial and quick way of determining which values in our data set are particularity unusual and should be double checked for measurement or sampling errors. These methods are not guaranteed to catch all errors. After we have identified these outliers it is important to investigate each value and determine why this value is extreme.  Remember, never remove outliers just because they are extreme or unusual.  Only remove outliers due to errors.  

There are also other outlier detection methods not discussed here.  The methods above are the most common for univariate data sets.  As data sets become more complicated, more techniques have been developed. 



# Questions 

**Question 1: Indexing with Pokemon (5 points) **

1a) Download the data set `Pokemon.csv` from *ELearn*.  This data set comes from [Kaggle.com](https://www.kaggle.com/abcsds/pokemon). Display the first 15 lines of this data set. (1 point)

```{r}
Pokemon <- read.csv("Hwk3Pokemon.csv")
Pokemon[1:15, ]
```


1b) Use commands in R to determine many Pokemon that have both `HP>100` and `Defense>100`. (1 point)

```{r}
nrow(Pokemon[Pokemon$HP>100 & Pokemon$Defense>100, ])
```

1c) Display 37th smallest value in the `HP` column using R commands. (1 point)

```{r}
sort(Pokemon$HP)[37]
```

1d) Create a new factor column in the Pokemon data set called `Mentality`. If the difference between the variable `Attack` is larger than the variable `Defense`, assign this character's `Mentality = Aggressive`.  If `Attack` is smaller than `Defense` then assign  `Mentality = Protective`.  If they are equal assign `Mentality = Balanced`. Display the first 15 rows of the Pokemon data set with this new variable. HINT: Create a new column and then using indexing and operators. (2 point)


```{r}
Pokemon$Mentality = "Balanced"
Pokemon$Mentality[Pokemon$Attack > Pokemon$Defense] = "Aggresive"
Pokemon$Mentality[Pokemon$Attack < Pokemon$Defense] = "Protective"
```



**Question 2: Data Manipulation with Pokemon (7 points)**

2a) Create a new data set called `Pokemon2` which only contains the columns:  `Name`, `Total`, `HP`, `Attack`,`Defense`, `Sp. Atk`, `Sp. Def`. Use the `head()` function to display the first few lines of this new data set. (2 points)

```{r}
Pokemon2 <- subset(Pokemon, 
                   select = c("Name", "Total", "HP", "Attack", 
                              "Defense", "Sp..Atk", "Sp..Def"))
head(Pokemon2)
```

2b) Create a new data set called `Pokemon3` which only contains the legendary Pokemon that have `Total` greater than the average (arithmetic mean) `Total` value.  In addition, only have this data set only contain the columns:  `Name`, `Type 1`, `Total`,  `Speed`,  `Generation`. Display the first 10 rows of this new data set. (2 points)

```{r}
Pokemon3 <- Pokemon[Pokemon$Legendary==TRUE, ]
Pokemon3 <- Pokemon3[Pokemon3$Total> mean(Pokemon$Total),]

Pokemon3 <- Pokemon3[, c("Name", "Type.1", "Total", "Speed", "Generation")]
head(Pokemon3, 10)
```


2c) The Pokemon data set contains `NA` values.  Create a new data set called `Pokemon4` which only contains complete cases.  That is, this data set only contains the rows which have no `NA` values. Display the first 10 rows of this new data set. (1 points)


```{r}
Pokemon4 <- na.omit(Pokemon)
head(Pokemon4, 10)
```

2d) Determine the Pokemon characters have the top 10 largest values in the `Total` column. Display *only the names* of these Pokemon. (2 points)

```{r}
Pokemon$Name[order(Pokemon$Total)][1:10]
```


**Question 3: Build Your Own Functions (8 points)**

3a) Create a function that calculates and returns the harmonic mean for any arbitrary numeric vector, call it `harm.mean()`. (2 points)

```{r}
harm.mean <- function(num) {
  value <- (sum(num^(-1))/length(num))^(-1)
  return(value)
}
```


3b) Create a function that calculates and returns the geometric mean for any arbitrary numeric vector, call it `geom.mean()`. (2 points)

```{r}
geom.mean = function(x){
    y = exp(mean(log(x)))
    return(y)
}
```

3d) Use the `harm.mean()` and `goem.mean()` functions you created above, and the built-in `mean()` function to calculate the harmonic mean, geometric mean, and mean of the `Total` variable.  Store the results of these functions in a *named* vector and display the it. (2 points)

```{r}
namedVec <- c(harm.mean(Pokemon$Total), geom.mean(Pokemon$Total), mean(Pokemon$Total))
names(namedVec) <- c("harmonic mean", "geometric mean", "mean")
namedVec
```

3e) Using the Pokemon characters with `Type 1` equal to `Poison`,  determine the harmonic mean and geometric mean of the `Attack` variable by using the functions created in above. (2 points)


```{r}
Type1_Poison = subset(Pokemon, Pokemon$Type.1 == "Poison")

harm.mean(Type1_Poison$Attack)
geom.mean(Type1_Poison$Attack)
```





**Question 4: Functions for Outliers (10 points)**

4a) Create a function that identifies possible outliers by using the IQR method described above. This function should have one input, an arbitrary numeric vector. It should return a vector of all the outliers, that is, a subset of the inputted vector.  If there are no identified outliers, return `NA`. (2 points)

```{r}
Method_IQR = function(x){
  q1 = quantile(x, prob = 0.25)
  q3 = quantile(x, prob = 0.75)
  iqr_value = q3 - q1
  
  
  Lower_Bound = q1 - 1.5*iqr_value
  Upper_Bound = q3 + 1.5*iqr_value
  
  outliers = subset(x, (x < Lower_Bound | x > Upper_Bound))
  
  if(length(outliers)==0){
    outliers = NA
  }
  return(outliers)
  
}
```


4b) Create a function that identifies possible outliers by using the Z-Score method described above. This function should have one input, an arbitrary numeric vector. It should return a vector of all the outliers, that is, a subset of the inputted vector.  If there are no identified outliers, return `NA`. (2 points) 

```{r}
Method_Zscore = function(x){
  Lower_Bound = (mean(x) - 2 * sd(x))
  Upper_Bound = (mean(x) + 2 * sd(x))
  
  if(length(outliers)==0){
    outliers = NA
  }
  return(outliers)
  
}
```


4c) Create a function that identifies possible outliers by using the Chebyschev method described above. This function should have one input, an arbitrary numeric vector. It should return a vector of all the outliers, that is, a subset of the inputted vector.  If there are no identified outliers, return `NA`. (2 points) 

```{r}
Method_Cheby = function(x){
  Lower_Bound = (mean(x) - 4.5 * sd(x))
  Upper_Bound = (mean(x) + 4.5 * sd(x))
  
  if(length(outliers)==0){
    outliers = NA
  }
  return(outliers)
}
```

4d) Create a function that identifies possible outliers using the IQR, Z-score, and Chebyschev method using the functions you created in questions (4a), (4b), (4c).  This function should return a *named list* where each element of the list contains the outliers for each method.  The names of this list should indicate which method was used. (1 points).

```{r}
Method_List = function(x){
  IQRMethod = Method_IQR(x)
  ZScore = Method_Zscore(x)
  Cheb_Method = Method_Cheby(x)
  
  methods = list("IQR" = IQRMethod,
                 "ZScore" = ZScore,
                 "ChebyMethod" = Cheb_Method)
  
  return(methods)
}
```

4e) Run the function created in question (4d) for the `Speed` variable. (1 point)


```{r}
Method_List(Pokemon$Speed)
```